import React from 'react'
import { ActionButton } from '../shared/ActionButton'

interface YTTokenCardProps {
  asset: any
  balance: number
  claimableYield: number
  displayMode: 'usd' | 'underlying'
  hook: any
  onClaimYield: () => void
}

export const YTTokenCard: React.FC<YTTokenCardProps> = ({
  asset,
  balance,
  claimableYield,
  displayMode,
  hook,
  onClaimYield
}) => {
  return (
    <div className="bg-gradient-to-br from-purple-500/10 to-pink-500/10 border border-purple-500/30 rounded-2xl p-6 backdrop-blur-sm">
      {/* Header */}
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center space-x-4">
          <div className="w-12 h-12 bg-gradient-to-br from-purple-500 to-pink-500 rounded-xl flex items-center justify-center shadow-lg">
            <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
            </svg>
          </div>
          <div>
            <div className="text-xl font-bold text-purple-300">YT-{asset.symbol}</div>
            <div className="text-sm text-gray-400">Yield Token</div>
          </div>
        </div>
        <div className="px-4 py-2 bg-purple-500/20 rounded-full border border-purple-500/30">
          <span className="text-sm text-purple-300 font-semibold">YIELD CLAIM RIGHTS</span>
        </div>
      </div>
      
      {/* Balance Display */}
      <div className="text-3xl font-bold text-purple-200 mb-4">
        {displayMode === 'usd' ? `$${(balance * 1.05).toFixed(2)}` : `${balance.toFixed(4)} YT`}
      </div>
      
      {/* YT Token Explanation */}
      <div className="mb-4 p-3 bg-purple-500/10 border border-purple-500/30 rounded-lg">
        <div className="text-xs text-purple-300 space-y-1">
          <div className="flex items-center space-x-2">
            <span className="text-yellow-400">üí°</span>
            <span><strong>YT tokens are NOT yield generators</strong></span>
          </div>
          <div className="text-xs text-purple-200">
            They represent the right to claim yield from underlying {asset.symbol} tokens
          </div>
        </div>
      </div>

      {balance > 0 ? (
        <div className="space-y-4">
          {/* Claimable Yield Display */}
          <div className="bg-gradient-to-r from-green-500/20 to-emerald-500/20 border border-green-500/30 rounded-xl p-4">
            <div className="flex items-center justify-between mb-2">
              <span className="text-green-300 font-medium">Claimable Yield</span>
              <span className="text-2xl font-bold text-green-400">
                {claimableYield > 0 ? `${claimableYield.toFixed(6)} SY` : '0.000000 SY'}
              </span>
            </div>
            <div className="text-xs text-green-300">
              Yield generated by underlying {asset.symbol} at {asset.apy}% APY
            </div>
          </div>

          {/* Stats Grid */}
          <div className="grid grid-cols-2 gap-4 text-sm">
            <div className="bg-purple-500/10 p-3 rounded-xl border border-purple-500/20">
              <div className="text-purple-300 font-medium">Underlying Asset APY</div>
              <div className="text-white font-bold">{asset.apy}%</div>
            </div>
            <div className="bg-purple-500/10 p-3 rounded-xl border border-purple-500/20">
              <div className="text-purple-300 font-medium">Token Balance</div>
              <div className="text-white font-bold">{balance.toFixed(4)} YT</div>
            </div>
          </div>

          {/* Value Breakdown */}
          <div className="bg-purple-500/10 p-4 rounded-xl border border-purple-500/20">
            <div className="flex items-center justify-between mb-2">
              <span className="text-purple-300 font-medium">Token Value</span>
              <span className="text-white font-bold">${(balance * 1.05).toFixed(4)}</span>
            </div>
            <div className="flex items-center justify-between">
              <span className="text-purple-300 font-medium">Yield Value</span>
              <span className="text-green-400 font-bold">${(claimableYield * 1.05).toFixed(4)}</span>
            </div>
          </div>

          {/* Claim Button */}
          <ActionButton
            onClick={onClaimYield}
            disabled={hook.isClaimingYTYield || claimableYield === 0}
            loading={hook.isClaimingYTYield}
            loadingText="Claiming Yield..."
            className="w-full"
            variant="primary"
          >
            {claimableYield > 0 ? (
              <div className="flex items-center justify-center space-x-2">
                <span>üé≤</span>
                <span>Claim {claimableYield.toFixed(6)} SY Yield</span>
              </div>
            ) : (
              <div className="flex items-center justify-center space-x-2">
                <span>‚è≥</span>
                <span>No Yield Available Yet</span>
              </div>
            )}
          </ActionButton>
        </div>
      ) : (
        <div className="text-center py-8">
          <div className="w-16 h-16 bg-gray-700/50 rounded-2xl flex items-center justify-center mx-auto mb-4">
            <svg className="w-8 h-8 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
          </div>
          <div className="text-gray-400 mb-2">No YT tokens yet</div>
          <div className="text-xs text-purple-300 bg-purple-500/10 p-2 rounded-lg border border-purple-500/20">
            YT Address: {hook.ytTokenAddress ? `${hook.ytTokenAddress.slice(0, 10)}...` : 'Not found'}
          </div>
        </div>
      )}
    </div>
  )
}