import React, { useState } from 'react'
import { useAccount } from 'wagmi'

interface DocSection {
  id: string
  title: string
  content: string
  difficulty: 'beginner' | 'intermediate' | 'advanced'
  tags: string[]
}

interface Tutorial {
  id: string
  title: string
  description: string
  steps: string[]
  estimatedTime: string
  difficulty: 'beginner' | 'intermediate' | 'advanced'
}

export const Documentation: React.FC = () => {
  const { isConnected } = useAccount()
  const [activeTab, setActiveTab] = useState<'guides' | 'concepts' | 'tutorials' | 'faq'>('guides')
  const [selectedDifficulty, setSelectedDifficulty] = useState<'all' | 'beginner' | 'intermediate' | 'advanced'>('all')
  const [searchQuery, setSearchQuery] = useState('')

  const documentationSections: DocSection[] = [
    {
      id: '1',
      title: 'What is CoreYield Protocol?',
      content: `CoreYield Protocol is a decentralized yield farming platform built on CoreDAO that allows users to earn yield on their assets through a unique tokenization system. The protocol splits assets into Principal Tokens (PT) and Yield Tokens (YT), giving users flexibility in managing their yield farming strategies.

Key Features:
• Standardized Yield (SY) tokens for consistent yield farming
• Principal and Yield token separation for flexible strategies
• Automated market making for optimal pricing
• Multi-asset support (stCORE, lstBTC, dualCORE)
• Community-driven governance and strategy sharing`,
      difficulty: 'beginner',
      tags: ['overview', 'introduction', 'basics']
    },
    {
      id: '2',
      title: 'Understanding SY, PT, and YT Tokens',
      content: `The CoreYield protocol uses three main token types:

1. Standardized Yield (SY) Tokens:
   - Represent your underlying asset plus accumulated yield
   - Can be split into PT and YT tokens
   - Earn yield automatically while held

2. Principal Tokens (PT):
   - Guarantee return of your principal at maturity
   - Trade at a discount to face value
   - Can be redeemed 1:1 for underlying asset at maturity

3. Yield Tokens (YT):
   - Receive all yield generated by the underlying asset
   - Higher risk but higher potential returns
   - Can be claimed periodically or held for compound growth

This system allows users to:
• Lock in principal protection with PT tokens
• Maximize yield potential with YT tokens
• Create custom yield strategies
• Trade tokens independently based on market conditions`,
      difficulty: 'beginner',
      tags: ['tokens', 'SY', 'PT', 'YT', 'explanation']
    },
    {
      id: '3',
      title: 'Yield Farming Strategies',
      content: `CoreYield offers several yield farming strategies:

Conservative Strategy:
• Hold SY tokens for steady yield
• Low risk, predictable returns
• Good for beginners

Balanced Strategy:
• Split SY tokens into PT and YT
• Hold PT for principal protection
• Use YT for yield maximization

Aggressive Strategy:
• Focus on YT tokens for maximum yield
• Higher risk, higher potential returns
• Requires active management

Liquidity Strategy:
• Provide liquidity to PT/YT pairs
• Earn trading fees plus yield
• Moderate risk with additional rewards

Risk Management:
• Diversify across multiple assets
• Monitor market conditions
• Set stop-losses for YT positions
• Consider maturity dates for PT tokens`,
      difficulty: 'intermediate',
      tags: ['strategies', 'yield-farming', 'risk-management']
    },
    {
      id: '4',
      title: 'Advanced Yield Optimization',
      content: `For experienced users, CoreYield offers advanced optimization techniques:

1. Yield Curve Arbitrage:
   - Exploit differences between PT and YT pricing
   - Trade based on yield curve movements
   - Requires deep understanding of market dynamics

2. Maturity Timing:
   - Time PT purchases around maturity dates
   - Capture convergence of PT price to face value
   - Manage rollover strategies

3. Cross-Asset Strategies:
   - Diversify across multiple CoreYield markets
   - Balance risk and yield across assets
   - Create portfolio-level optimization

4. Dynamic Rebalancing:
   - Adjust PT/YT ratios based on market conditions
   - Respond to yield curve changes
   - Optimize for maximum risk-adjusted returns

5. Liquidity Mining:
   - Provide liquidity to earn additional rewards
   - Participate in governance through staking
   - Earn protocol fees and incentives`,
      difficulty: 'advanced',
      tags: ['advanced', 'optimization', 'arbitrage', 'strategies']
    },
    {
      id: '5',
      title: 'Smart Contract Security',
      content: `CoreYield Protocol prioritizes security through multiple layers:

Contract Architecture:
• Diamond pattern for upgradeable contracts
• Modular design for easy maintenance
• Extensive testing and auditing

Security Features:
• Multi-signature governance
• Timelock for critical operations
• Emergency pause functionality
• Rate limiting for large operations

Audit Process:
• Multiple independent audits
• Bug bounty programs
• Continuous security monitoring
• Community-driven security reviews

Risk Mitigation:
• Insurance coverage for major risks
• Gradual rollout of new features
• Community governance for changes
• Transparent security practices`,
      difficulty: 'intermediate',
      tags: ['security', 'smart-contracts', 'audits', 'safety']
    }
  ]

  const tutorials: Tutorial[] = [
    {
      id: '1',
      title: 'Getting Started with CoreYield',
      description: 'Learn how to connect your wallet and make your first deposit',
      steps: [
        'Connect your wallet (MetaMask, WalletConnect, etc.)',
        'Switch to CoreDAO network',
        'Get some test tokens from the faucet',
        'Approve the protocol to spend your tokens',
        'Deposit tokens to receive SY tokens',
        'View your balance and earned yield'
      ],
      estimatedTime: '5-10 minutes',
      difficulty: 'beginner'
    },
    {
      id: '2',
      title: 'Splitting SY Tokens into PT and YT',
      description: 'Learn how to split your SY tokens for advanced yield strategies',
      steps: [
        'Ensure you have SY tokens in your wallet',
        'Navigate to the Split interface',
        'Enter the amount you want to split',
        'Review the expected PT and YT amounts',
        'Confirm the transaction',
        'Wait for confirmation and view your new tokens'
      ],
      estimatedTime: '10-15 minutes',
      difficulty: 'intermediate'
    },
    {
      id: '3',
      title: 'Claiming Yield from YT Tokens',
      description: 'Learn how to claim accumulated yield from your YT tokens',
      steps: [
        'Check your YT token balance',
        'Navigate to the Claim interface',
        'View available yield for claiming',
        'Select the amount to claim',
        'Confirm the transaction',
        'Receive yield in your wallet'
      ],
      estimatedTime: '5-8 minutes',
      difficulty: 'intermediate'
    },
    {
      id: '4',
      title: 'Advanced Portfolio Management',
      description: 'Learn advanced techniques for managing your CoreYield portfolio',
      steps: [
        'Analyze your current positions across assets',
        'Calculate optimal PT/YT ratios',
        'Implement rebalancing strategies',
        'Monitor yield performance metrics',
        'Adjust strategies based on market conditions',
        'Track your portfolio performance over time'
      ],
      estimatedTime: '20-30 minutes',
      difficulty: 'advanced'
    }
  ]

  const faqItems = [
    {
      question: 'What is the minimum investment amount?',
      answer: 'The minimum investment varies by asset market. Generally, it ranges from 100 to 1000 tokens depending on the specific market configuration.'
    },
    {
      question: 'How often can I claim yield?',
      answer: 'Yield can typically be claimed every 24 hours, but this may vary depending on the specific market and yield generation rate.'
    },
    {
      question: 'What happens if I lose my private keys?',
      answer: 'If you lose your private keys, you will lose access to your tokens permanently. Always use secure wallet management practices and consider hardware wallets for large amounts.'
    },
    {
      question: 'Can I withdraw my tokens before maturity?',
      answer: 'Yes, you can withdraw your underlying assets by burning your SY tokens or redeeming PT tokens, though this may incur some slippage depending on market conditions.'
    },
    {
      question: 'How is the yield calculated?',
      answer: 'Yield is calculated based on the performance of the underlying assets and the protocol\'s yield generation mechanisms. The exact calculation varies by asset type.'
    },
    {
      question: 'What are the risks involved?',
      answer: 'Risks include smart contract risk, market risk, liquidity risk, and yield volatility. Always do your own research and never invest more than you can afford to lose.'
    }
  ]

  const filteredSections = documentationSections.filter(section => 
    (selectedDifficulty === 'all' || section.difficulty === selectedDifficulty) &&
    (searchQuery === '' || 
      section.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
      section.content.toLowerCase().includes(searchQuery.toLowerCase()) ||
      section.tags.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase())))
  )

  const filteredTutorials = tutorials.filter(tutorial =>
    (selectedDifficulty === 'all' || tutorial.difficulty === selectedDifficulty) &&
    (searchQuery === '' || 
      tutorial.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
      tutorial.description.toLowerCase().includes(searchQuery.toLowerCase()))
  )

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'beginner': return 'bg-green-500/20 text-green-400'
      case 'intermediate': return 'bg-yellow-500/20 text-yellow-400'
      case 'advanced': return 'bg-red-500/20 text-red-400'
      default: return 'bg-gray-500/20 text-gray-400'
    }
  }

  return (
    <div className="min-h-screen bg-gray-900 text-white p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-4xl font-bold text-white mb-2">CoreYield Documentation</h1>
          <p className="text-gray-400 text-lg">Learn everything about yield farming, token strategies, and protocol mechanics</p>
        </div>

        {/* Tab Navigation */}
        <div className="flex border-b border-gray-700 mb-8">
          {[
            { id: 'guides', label: 'User Guides', icon: '📖' },
            { id: 'concepts', label: 'Core Concepts', icon: '🧠' },
            { id: 'tutorials', label: 'Tutorials', icon: '🎯' },
            { id: 'faq', label: 'FAQ', icon: '❓' }
          ].map((tab) => (
            <button
              key={tab.id}
                              onClick={() => setActiveTab(tab.id as 'guides' | 'concepts' | 'tutorials' | 'faq')}
              className={`flex items-center space-x-2 px-6 py-3 text-sm font-medium transition-colors ${
                activeTab === tab.id
                  ? 'text-blue-400 border-b-2 border-blue-400 bg-blue-400/10'
                  : 'text-gray-400 hover:text-white'
              }`}
            >
              <span>{tab.icon}</span>
              <span>{tab.label}</span>
            </button>
          ))}
        </div>

        {/* Filters and Search */}
        <div className="flex flex-col md:flex-row gap-4 mb-8">
          <div className="flex items-center space-x-2">
            <select
              value={selectedDifficulty}
              onChange={(e) => setSelectedDifficulty(e.target.value as 'all' | 'beginner' | 'intermediate' | 'advanced')}
              className="px-4 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-blue-500"
            >
              <option value="all">All Difficulties</option>
              <option value="beginner">Beginner</option>
              <option value="intermediate">Intermediate</option>
              <option value="advanced">Advanced</option>
            </select>
          </div>
          
          <div className="flex-1">
            <input
              type="text"
              placeholder="Search documentation..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:border-blue-500"
            />
          </div>
        </div>

        {/* Content */}
        {activeTab === 'guides' && (
          <div className="space-y-6">
            <h2 className="text-2xl font-semibold text-white">User Guides</h2>
            
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {filteredSections.map((section) => (
                <div key={section.id} className="bg-gray-800 rounded-2xl border border-gray-700 p-6">
                  <div className="flex items-start justify-between mb-4">
                    <h3 className="text-xl font-semibold text-white">{section.title}</h3>
                    <span className={`px-3 py-1 rounded-full text-xs font-medium ${getDifficultyColor(section.difficulty)}`}>
                      {section.difficulty}
                    </span>
                  </div>
                  
                  <div className="flex flex-wrap gap-2 mb-4">
                    {section.tags.map((tag) => (
                      <span key={tag} className="px-2 py-1 bg-gray-700 text-gray-300 text-xs rounded-lg">
                        {tag}
                      </span>
                    ))}
                  </div>
                  
                  <p className="text-gray-300 text-sm leading-relaxed whitespace-pre-line">
                    {section.content}
                  </p>
                </div>
              ))}
            </div>
          </div>
        )}

        {activeTab === 'concepts' && (
          <div className="space-y-6">
            <h2 className="text-2xl font-semibold text-white">Core Concepts</h2>
            
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {filteredSections.map((section) => (
                <div key={section.id} className="bg-gray-800 rounded-2xl border border-gray-700 p-6">
                  <div className="flex items-start justify-between mb-4">
                    <h3 className="text-xl font-semibold text-white">{section.title}</h3>
                    <span className={`px-3 py-1 rounded-full text-xs font-medium ${getDifficultyColor(section.difficulty)}`}>
                      {section.difficulty}
                    </span>
                  </div>
                  
                  <div className="flex flex-wrap gap-2 mb-4">
                    {section.tags.map((tag) => (
                      <span key={tag} className="px-2 py-1 bg-gray-700 text-gray-300 text-xs rounded-lg">
                        {tag}
                      </span>
                    ))}
                  </div>
                  
                  <p className="text-gray-300 text-sm leading-relaxed whitespace-pre-line">
                    {section.content}
                  </p>
                </div>
              ))}
            </div>
          </div>
        )}

        {activeTab === 'tutorials' && (
          <div className="space-y-6">
            <h2 className="text-2xl font-semibold text-white">Step-by-Step Tutorials</h2>
            
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {filteredTutorials.map((tutorial) => (
                <div key={tutorial.id} className="bg-gray-800 rounded-2xl border border-gray-700 p-6">
                  <div className="flex items-start justify-between mb-4">
                    <h3 className="text-xl font-semibold text-white">{tutorial.title}</h3>
                    <span className={`px-3 py-1 rounded-full text-xs font-medium ${getDifficultyColor(tutorial.difficulty)}`}>
                      {tutorial.difficulty}
                    </span>
                  </div>
                  
                  <p className="text-gray-300 text-sm mb-4">{tutorial.description}</p>
                  
                  <div className="mb-4">
                    <span className="text-gray-400 text-sm">Estimated time: {tutorial.estimatedTime}</span>
                  </div>
                  
                  <div className="space-y-3">
                    <h4 className="text-white font-medium">Steps:</h4>
                    {tutorial.steps.map((step, index) => (
                      <div key={index} className="flex items-start space-x-3">
                        <span className="w-6 h-6 bg-blue-600 text-white text-sm rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                          {index + 1}
                        </span>
                        <p className="text-gray-300 text-sm">{step}</p>
                      </div>
                    ))}
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {activeTab === 'faq' && (
          <div className="space-y-6">
            <h2 className="text-2xl font-semibold text-white">Frequently Asked Questions</h2>
            
            <div className="space-y-4">
              {faqItems.map((item, index) => (
                <div key={index} className="bg-gray-800 rounded-2xl border border-gray-700 p-6">
                  <h3 className="text-lg font-semibold text-white mb-3">{item.question}</h3>
                  <p className="text-gray-300 text-sm leading-relaxed">{item.answer}</p>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Quick Start Guide */}
        {isConnected && (
          <div className="mt-12 bg-gradient-to-r from-blue-600 to-purple-600 rounded-2xl p-8 text-center">
            <h3 className="text-2xl font-bold text-white mb-4">Ready to Start Yield Farming?</h3>
            <p className="text-blue-100 text-lg mb-6">
              Now that you understand the basics, it's time to put your knowledge into practice!
            </p>
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <button className="px-6 py-3 bg-white text-blue-600 rounded-xl font-semibold hover:bg-gray-100 transition-colors">
                🚀 Start Farming
              </button>
              <button className="px-6 py-3 bg-transparent border-2 border-white text-white rounded-xl font-semibold hover:bg-white hover:text-blue-600 transition-colors">
                📊 View Analytics
              </button>
            </div>
          </div>
        )}

        {/* Additional Resources */}
        <div className="mt-12 bg-gray-800 rounded-2xl border border-gray-700 p-8">
          <h3 className="text-2xl font-semibold text-white mb-6">Additional Resources</h3>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div className="text-center">
              <div className="w-16 h-16 bg-blue-500/20 rounded-2xl flex items-center justify-center mx-auto mb-4">
                <span className="text-3xl">📚</span>
              </div>
              <h4 className="text-white font-semibold mb-2">Technical Docs</h4>
              <p className="text-gray-400 text-sm">Deep dive into protocol mechanics and smart contracts</p>
            </div>
            
            <div className="text-center">
              <div className="w-16 h-16 bg-green-500/20 rounded-2xl flex items-center justify-center mx-auto mb-4">
                <span className="text-3xl">🎥</span>
              </div>
              <h4 className="text-white font-semibold mb-2">Video Tutorials</h4>
              <p className="text-gray-400 text-sm">Visual guides for complex strategies and features</p>
            </div>
            
            <div className="text-center">
              <div className="w-16 h-16 bg-purple-500/20 rounded-2xl flex items-center justify-center mx-auto mb-4">
                <span className="text-3xl">💬</span>
              </div>
              <h4 className="text-white font-semibold mb-2">Community Support</h4>
              <p className="text-gray-400 text-sm">Get help from the CoreYield community and team</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
} 